#!/bin/bash
# Ys 命令列舉自動補齊


# 參考文件：
#   * https://segmentfault.com/a/1190000002968878
#   * https://my.oschina.net/letiantian/blog/546573
#   * https://debian-administration.org/article/317

# 命令行斷字符相關關鍵字：
#   * $cur
#   * $COMP_WORDBREAKS
#   * _get_cword()
#   * _get_pword()
#   * _get_comp_words_by_ref()
#   * __ltrim_colon_completions()


##shStyle 共享變數


declare -A __ysBashComplete_info

__ysBashComplete_br="
"


##shStyle 函式庫


# 註冊 Ys 命令自動補齊
# # 命令自動補齊文件規範
# #   * 第一行為 `complete` 命令的參數
# #     （無須填寫 `-f` 選項）
# #   * 命令行列表以 `@` 字符開頭並代替命令名稱。
# #   * 註解行以 `#` 字符開頭。
#
# # 命令自動補齊文件範例：
# #   @$ hello
# #   @ subACmd
# #   @ subACmd --optAA
# #   @ subACmd --optBA
# #   @ subACmd --optCA
# #   @ subBCmd
# #   @ subCCmd
#
# # 命令執行範例：
# #   $ hello <tab>
# #     => subACmd subBCmd subCCmd
# #   $ hello subA<tab>
# #     => (自動補齊命令)
# #   $ hello subACmd<tab>
# #     => (自動補齊命令)
# #   $ hello subACmd <tab>
# #     => (空白)
# #   $ hello subACmd -<tab>
# #     => --optAA --optBA --optCA
# #   $ hello subACmd --optA<tab>
# #     => (自動補齊命令)
# #   $ hello subACmd --optAA<tab>
# #     => (自動補齊命令)
# #   $ hello subACmd --optBA -<tab>
# #     => --optAA --optCA
# [[USAGE]] <命令自動補齊文件路徑>
__ysBashComplete_register() {
    local cmdEnumFilename="$1"

    local completeCmd argOptLen targetTxt target

    if [ -f "$cmdEnumFilename" ] \
        && [ -z "`grep -v "^\(#\|@ \)" "$cmdEnumFilename"`" ]; then

        completeCmd=`sed -n "1p" "$cmdEnumFilename" | grep "^#$ " \
            | sed "s/^#$ \(.\+\)$/\1/"`

        targetTxt=`grep " -- " <<< " $completeCmd" | sed "s/^.* -- \(.*\)$/\1/"`
        [[ " $completeCmd" =~ \ - ]] || targetTxt=$completeCmd

        if [ -n "$targetTxt" ]; then
            for target in $targetTxt
            do
                __ysBashComplete_info[$target]="$cmdEnumFilename"
            done

            complete -F "__ysBashComplete" $completeCmd
            return
        fi
    fi

    printf "`tput setaf 3 bold`%s`tput sgr0`\n" \
        "設定命令自動補齊文件失敗。（ \"$cmdEnumFilename\" 文件不存在或不符規定）"
    return 1
}

# 由 `complete` 命令自動執行
__ysBashComplete() {
    local cmdName="$1"

    local cmdEnumFilename=${__ysBashComplete_info[$cmdName]}

    realpath "$cmdEnumFilename" &> /dev/null || return

    __ysBashComplete_parse "$@"
    local curr=$__ysBashComplete_rtnParse_curr
    local prev=$__ysBashComplete_rtnParse_prev
    local compList=("${__ysBashComplete_rtnParse_compList[@]}")
    local cmdList=("${__ysBashComplete_rtnParse_cmdList[@]}")
    local optList=("${__ysBashComplete_rtnParse_optList[@]}")
    # local cmdChainTxt=$__ysBashComplete_rtnParse_cmdChainTxt
    __ysBashComplete_parse_reset

    # 當前值和前一項值是否為選項旗幟
    local isPrevOptType isCurrOptType
    [[ "$prev" =~ ^- ]] && isPrevOptType=1 || isPrevOptType=0
    [[ "$curr" =~ ^- ]] && isCurrOptType=1 || isCurrOptType=0

    local cmdEnumAllowListTxt cmdGrepTxt awkColumnIdx
    local commandState="unknown" # 命令狀態： unknown, cmd, opt, optArgu
    local lenCmdList=${#cmdList[@]}
    local cmdGrepOriginTxt="`sed "s/$cmdName/@/" <<< "${cmdList[*]}"`"

    if [ $isCurrOptType -eq 0 ] && [ $isPrevOptType -eq 1 ]; then
        ((awkColumnIdx= lenCmdList + 2))
        cmdGrepTxt="$cmdGrepOriginTxt $prev"
        [ -n "$curr" ] && cmdGrepTxt+=" $curr"
        cmdEnumAllowListTxt=`
            grep "^$cmdGrepTxt" "$cmdEnumFilename" \
                | awk "{print \\\$$awkColumnIdx}" | uniq
        `
    fi
    if [ -n "$cmdEnumAllowListTxt" ]; then
        commandState="optArgu"
    else
        cmdGrepTxt="$cmdGrepOriginTxt"
        if [ $isCurrOptType -eq 1 ]; then
            commandState="opt"
            cmdGrepTxt+=" $curr"
        elif [ ${#optList[@]} -eq 0 ]; then
            commandState="cmd"
        fi
        if [ -n "$curr" ] && [ $isCurrOptType -eq 0 ]; then
            awkColumnIdx=$lenCmdList
        else
            ((awkColumnIdx= lenCmdList + 1))
        fi

        cmdEnumAllowListTxt=`
            grep "^$cmdGrepTxt" "$cmdEnumFilename" \
                | awk "{print \\\$$awkColumnIdx}" | uniq
        `
    fi

    case "$commandState" in
        cmd )
            cmdEnumAllowListTxt=`grep -v "^-" <<< "$cmdEnumAllowListTxt"`
            ;;
        opt )
            # cmdEnumAllowListTxt=`grep "^--" <<< "$cmdEnumAllowListTxt"`
            # for val in "${optList[@]}"
            # do
            #     cmdEnumAllowListTxt=`grep -Fv -- "$val" <<< "$cmdEnumAllowListTxt"`
            # done
            ;;
        optArgu )
            ;;
        * )
            cmdEnumAllowListTxt=""
            ;;
    esac

    COMPREPLY=($cmdEnumAllowListTxt)
}


##shStyle 函式庫


__ysBashComplete_rtnParse_curr=""
__ysBashComplete_rtnParse_prev=""
__ysBashComplete_rtnParse_compList=()
__ysBashComplete_rtnParse_cmdList=()
__ysBashComplete_rtnParse_optList=()
__ysBashComplete_rtnParse_cmdChainTxt=""
__ysBashComplete_parse() {
    local cmdName="$1"   # ${COMP_WORDS[0]}
    local curr="$2"      # ${COMP_WORDS[COMP_CWORD]}
    local prev="$3"      # ${COMP_WORDS[COMP_CWORD - 1]}
    local excludeWordBreaks="$4"
    local refCurr="$5"

    local lastCmdIdx=$COMP_CWORD

    local compList
    local optList=()
    local cmdChainTxt=""

    local idx len val
    local grepTxt prevVal currVal nextVal
    if [ -n "$excludeWordBreaks" ]; then
        compList=($cmdName)
        for ((idx=1; idx <= $COMP_CWORD ; idx++))
        do
            currVal=${COMP_WORDS[idx]}
            nextVal=${COMP_WORDS[idx + 1]}
            grepTxt=`grep -Fo -- "$nextVal" <<< "$excludeWordBreaks"`
            if [ ${#nextVal} -eq 1 ] && [ -n "$grepTxt" ]; then
                ((idx++))
                val="$currVal$nextVal"
            else
                val="$currVal"
            fi
            compList[${#compList[@]}]=$val
        done

        val=""
        for ((idx=$COMP_CWORD; idx > 0; idx--))
        do
            val="${COMP_WORDS[idx]}$val"
            if [ "$refCurr" == "$val" ]; then
                if [ $idx -ne $COMP_CWORD ]; then
                    compList=(${compList[@]::$idx})
                    compList[${#compList[@]}]=$val
                fi
                break
            fi
        done
        ((lastCmdIdx= ${#compList[@]} - 1))
        curr=${compList[lastCmdIdx]}
        prev=${compList[lastCmdIdx - 1]}
    else
        compList=("${COMP_WORDS[@]}")
    fi

    [[ "$curr" =~ ^- ]] && ((lastCmdIdx--))

    # 最後一個參數若為 "無值" 則視為未決定
    [ -n "$curr" ] && ((lastCmdIdx++))

    while [ $lastCmdIdx -gt 0 ]
    do
        ((lastCmdIdx--))
        val=${compList[lastCmdIdx]}
        prevVal=${compList[lastCmdIdx - 1]}
        [[ ! "$val" =~ ^- ]] && [[ ! "$prevVal" =~ ^- ]] && break
        # [[ "$val" =~ ^-- ]] || continue
        if [[ "$val" =~ ^- ]]; then
            optList[${#optList[@]}]=$val
        else
            optList[${#optList[@]}]="$prevVal=$val"
        fi
    done

    if [ $lastCmdIdx -gt 0 ]; then
        __ysBashComplete_rtnParse_cmdList=("$cmdName" "${compList[@]:1:lastCmdIdx}")
        cmdChainTxt=`__ysBashComplete_joinChain "${compList[@]:1:lastCmdIdx}"`
    else
        __ysBashComplete_rtnParse_cmdList=("$cmdName")
    fi

    [ -z "$curr" ] && cmdChainTxt+="_" || :

    cmdChainTxt+="_p"
    [[ "$prev" =~ ^- ]] && cmdChainTxt+="$prev"
    cmdChainTxt+="_c"
    if [[ "$curr" =~ ^- ]]; then
        cmdChainTxt+="$curr"
        cmdChainTxt+="_opt"
    else
        cmdChainTxt+="_cmd"
    fi

    __ysBashComplete_rtnParse_curr=$curr
    __ysBashComplete_rtnParse_prev=$prev
    __ysBashComplete_rtnParse_compList=("${compList[@]}")
    __ysBashComplete_rtnParse_optList=("${optList[@]}")
    __ysBashComplete_rtnParse_cmdChainTxt=$cmdChainTxt

    # test 測試時參考
    # cmdList=("${__ysBashComplete_rtnParse_cmdList[@]}")
    # echo
    # echo "curr: $curr"
    # echo "prev: $prev"
    # echo "compList: ${#compList[@]} |${compList[@]}|"
    # echo "cmdList: ${#cmdList[@]} |${cmdList[@]}|"
    # echo "optList: ${#optList[@]} |${optList[@]}|"
    # echo "cmdChainTxt: $cmdChainTxt"
    # echo
}
__ysBashComplete_parse_reset() {
    __ysBashComplete_rtnParse_curr=""
    __ysBashComplete_rtnParse_prev=""
    __ysBashComplete_rtnParse_compList=()
    __ysBashComplete_rtnParse_cmdList=()
    __ysBashComplete_rtnParse_optList=()
    __ysBashComplete_rtnParse_cmdChainTxt=""
}

__ysBashComplete_joinChain() {
    local cmdChainTxt
    local separator="_"

    cmdChainTxt=`for field in "$@"; do echo -n "$field$separator"; done`
    cmdChainTxt=${cmdChainTxt::-1}

    echo "$cmdChainTxt"
}

